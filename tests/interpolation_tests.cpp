#include <iostream>
#include <cmath>

// Custom source includes
#include "../includes/interpolation.h"

// Custom test includes
#include "../includes/interpolation_tests.h"


using namespace std;


bool is_interpolation_correct() {

	/* Checks whether or not interpolation function returns a
	valid interpolatied vector.

	Notes
	-----
	Performs a simple element by element check on an example vector
	generated by the current interpolation function in 
	interpolation.cpp. Tolerance is defined manually here, not as
	input.

	Parameters
	----------
	None.

	Returns
	-------
	bool: 
		False if any element is not within tolerance, else true.

	*/

	// Example coarse and fine arrays as they should be
	double coarse_array[3] = { 1, 1, 1 };
	double true_fine_array[7] = { 0.5, 1, 1, 1, 1, 1, 0.5 };

	// Create and calculate with function
	double made_fine_array[7] = { 0 };
	interpolate_vector(coarse_array, 3, made_fine_array, 7);

	// Compare element by element
	double tolerance = 10e-6;
	double difference;
	bool any_mismatch = false;
	for (int i = 0; i < 7; i++) {

		difference = abs(true_fine_array[i] - made_fine_array[i]);

		// If any element dosent match enough, fail test
		if (difference > tolerance) {
			any_mismatch = true;
			break;
		}

	}

	// Inform user of outcome
	cout << "Interpolation correctness test: ";
	if (any_mismatch) {

		cout << "FAIL" << endl;

		// Print expected 
		cout << "Expected output: [";
		for (int i = 0; i < 7; i++) {
			cout << true_fine_array[i] << " ";
		}
		cout << "]" << endl;

		// Print reality
		cout << "Actual output:   [";
		for (int i = 0; i < 7; i++) {
			cout << made_fine_array[i] << " ";
		}
		cout << "]" << endl;

		return false;

	} else {
		cout << "PASS" << endl;
		return true;
	}

}


void run_interpolation_tests() {

	// Test if interpolation is working
	is_interpolation_correct();

}